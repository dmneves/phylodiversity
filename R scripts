###loading libraries
require(ape)
require(classInt)
require(geiger)
require(maps)
require(nlme)
require(phytools)
require(picante)
require(raster)
require(RColorBrewer)
require(segmented)
require(TreeSim)
require(vegan)

###loading objects
#community (genus-by-site) matix
comm <- read.csv(file.choose(), header = T, row.names = 1, sep = ',')
#phylogeny
phy <- read.tree('phy.tre')

##matching objects (i.e., checking whether species in matrix are tips in phylogeny; and vice-versa)
#tmp = temporary object (here and elsewhere)
tmp <- match.phylo.comm(phy, comm)
comm <- tmp$comm
phy <- tmp$phy

###computing lineage diversity
LD <- ses.pd(comm, phy, null.model = 'taxa.labels', runs = 999)

###loading metadata (md) matrix comprising explanatory variables
#md and community matrix have the same row order 
md <- read.csv(file.choose(), header = T, row.names = 1, sep = ',')
md <- cbind(LD, md)

###regressions
#linear
summary(lm(LD ~ MAP, data = md))#LD = Lineage Diversity; MAP = Mean Annual Precipitation
#quadratic
summary(lm(LD ~ poly(MAP, 2, raw = T), data = md)
#piecewise
summary(segmented(lm(LD ~ MAP, data = md), seg.Z = ~ MAP))

###subsetting metadata according to break-point in piecewise regression
low.MAP <- md[which(md$MAP<1490),]
hi.MAP <- md[which(md$MAP>=1490),]

###Generalised Least Squares (controlling for spatial AC)
##low.MAP
attach(low.MAP)
f1 <- formula(LD ~ MAP)

low.null <- gls(f1, data = low.MAP)
low.ac <- gls(f1, correlation = corExp(form = ~ 'Long10' + 'Lat10', nugget = TRUE), data = low.MAP)
#check available correlation structures at https://stat.ethz.ch/R-manual/R-devel/library/nlme/html/corClasses.html

##hi.MAP
detach(low.MAP)
attach(hi.MAP)

hi.null <- gls(f1, data = hi.MAP)
hi.ac <- gls(f1, correlation = corExp(form = ~ 'Long10' + 'Lat10', nugget = TRUE), data = hi.MAP)
#extracting AIC values
AIC(low.null)
AIC(low.ac)
AIC(hi.null)
AIC(hi.ac)

###computing phylogenetic signal	
##creating temporary community matrix (tmp) with absences = NA, and multiplying presences in a given site by its MAP value
tmp <- comm
tmp[tmp == 0] <- NA
tmp <- tmp *md$MAP

##creating object with precipitation niche of each genus (by calculating mean MAP for sites at which it occurred)
prec <- apply(tmp, 2, mean, na.rm = T)

##matching objects and computing phylosignal
tmp <- match.phylo.data(phy, prec)
phy <- tmp$phy
prec <- tmp$data

phylosig(phy, prec, method = 'lambda', test = T, nsim = 1000) #prec = precipitation niche of each genus

###Figure 1	
obj <- contMap(phy, phylovector, plot = F)
plot(obj, type = 'fan', lwd = 1.5, ftype = 'off', legend = F, )
add.color.bar(leg = 80, x = 65, y = 140, lims = obj$lims, obj$cols, invert = T, lwd = 3, digits = 2, fsize = 1, prompt = FALSE,
	      title = "MAP", subtitle = "length=80")

###Figure 2
latlong <- cbind(md$Long10, md$Lat10)
par(mfrow=c(1,2))

##x~y plot
plot(md$LD ~ md$MAP, col = "white", xlab = "Mean Annual Precipitation (mm)", ylab = "Lineage Diversity (sesPD)",, 
     	cex.axis = 1.5, cex.lab = 1.5)
main = title('a', cex.main = 1.5, adj = 0)

##setting color ramp for points
var <- md$LD
nclas <- brewer.pal(4, "Spectral")
nclas <- nclas[4:1]
class <- classIntervals(var)
colcode <- findColours(class, nclas)	
points(md$MAP, md$LD, pch = c(17, 16)[as.numeric(md$MAP_beta)], col = colcode)

##extracting coefficients of correlation for legend
low.r = bquote(r^2 == .(format(cor(low.MAP$LD,predict(low.ac))^2, digits = 2)))
hi.r = bquote(r^2 == .(format(cor(hi.MAP$LD,predict(hi.ac))^2, digits = 2)))
legend("topleft", legend = low.r, bty = "n", cex = 1.5)
legend("topright", legend = hi.r, bty = "n", cex = 1.5)

##extracting slope and intercept for curves
x.low <- c(min(md$MAP), 1490)
y.low <- x.low* lm(low.MAP$LD ~ low.MAP$MAP)$coefficients[2]-lm(low.MAP$LD ~ low.MAP$MAP)$coefficients[1]
x.hi <- c(1490,max(md$MAP))
y.hi <- x.hi*(lm(hi.MAP$LD ~ hi.MAP$MAP)$coefficients[2])+ lm(hi.MAP$LD ~ hi.MAP$MAP)$coefficients[1]

##extracting ranges for 99% confidence intervals and plotting curves
#low.MAP
low.ci <- lm(LD ~ MAP, data = low.MAP)
low.predict <- predict(low.ci, interval = "confidence", level = 0.99)
ix <- sort(low.MAP$MAP, index.return = T)$ix
polygon(c(rev(low.MAP$MAP[ix]), low.MAP$MAP[ix]), c(rev(low.predict[ix, 3]), low.predict[ix, 2]),
	border = NA, col = gray(0.2, alpha = 0.5))
#hi.MAP
hi.ci <- lm(LD ~ MAP, data = hi.MAP)
hi.predict <- predict(hi.ci, interval = "confidence", level = 0.99)
ix <- sort(hi.MAP$MAP, index.return = T)$ix
polygon(c(rev(hi.MAP$MAP[ix]), hi.MAP$MAP[ix]), c(rev(hi.predict[ix, 3]), hi.predict[ix, 2]),
	border = NA, col = gray(0.2, alpha = 0.5))
lines(x.hi, y.hi, lwd = 5, col = gray(0.2, alpha = 0.9))
#break-point
abline(v = 1490, lty = 2, lwd = 5, col = gray(0.2,alpha = 0.9))

#map
map(xlim = c(-77.8533,-34.8608), ylim = c(-24.9044,8.4711), lty = 'dashed')#min and max latlongs
map.axes(cex.axis = 1.5)
points(md$Long10, md$Lat10, pch = c(17, 16)[as.numeric(md2$MAP_beta)], col = colcode, cex = 0.5)
ordisurf(latlong, md$MAP, col = "black", level = c(1200, 1800), labcex = 0.8, main = "", add = T)
ordisurf(latlong, md$MAP, col = "gray60", level = c(2400, 2800), labcex = 0.8, main = "", add = T)
main = title('b', cex.main = 1.5, adj = 0)
	
###Figure 3
#load shapefiles from wd and create metadata matrix (md2) comprising latlongs for 80 tree communities with highest LD (top 5%) 
md2 <- md[order(md$LD, decreasing = T), ]
md2 <- md2[1:80, ]

wdpa <- shapefile('wdpa')#from World Database of Protected Areas
sa <- shapefile('south_america')

e <- c(min(md2$Long10), max(md2$Long10), min(md2$Lat10), max(md2$Lat10))#map extension
wdpa <- crop(wdpa, e)

map(xlim = c(-77.8533, -34.8608), ylim = c(-24.9044, 8.4711), col = 'white')
map.axes()

plot(wdpa, col = 'gray90', border = 'gray90', add = T)
plot(south.amer, add = T)
points(md2$Long10, md2$Lat10, pch = 16, col = rgb(t(col2rgb("red"))/255, alpha = 0.5)), cex = 0.5)
legend('topright', c('Protected Areas', 'High LD unprotected'), pch = c(15, 16),
       col = c('gray90', rgb(t(col2rgb("red"))/255, alpha = 0.5)), bty = 'n')

################################
#Suplementary Analyses (in prep)
################################

##SUNPLIN; i.e., inserting unsequenced taxa into the phylogeny using function in geiger to get taxonomy for each taxon from ncbi
#loading metadata (md3) comprising all genera in the communities
md3 <- read.csv(file.choose(), header = T, sep = ",")
taxonomy.genus <- as.data.frame(gbresolve(md3$Genus))

##matching that up with the original matrix
taxonomy <- matrix(NA, nrow(md3), ncol(taxonomy.genus))
colnames(taxonomy) <- colnames(taxonomy.genus)
for (i in 1:nrow(taxonomy)){
	if (genus$Genus[i]%in%taxonomy.genus$genus){
		taxonomy[i,] <- as.matrix(taxonomy.genus[match(md3$Genus[i], taxonomy.genus$genus),])
	}
}
taxonomy[which(md3$Genus%in%taxonomy.genus$genus),] <- as.matrix(taxonomy.genus[na.omit(match(md3$Genus, taxonomy.genus$genus)), -1])

genus.taxonomy <- cbind(md3, taxonomy)
write.csv(genus.taxonomy,"genus_taxonomy.csv")
#It seems most efficient to fill out the rest of this table out of R (using plantlist.org, and filling in empty cells with NA)

##loading taxonomy matrix
genus.taxonomy <- read.csv("genus_taxonomy.csv", stringsAsFactors = F)

##creating vectors for each taxonomic rank (t1:t6 are temporary objects)
#subtribe
t1 <- summary(as.factor(genus.taxonomy[, 2]), maxsum = 10000)
t2 <- names(t1)[which(t1>1)]
t3 <- t2[1:(length(t2)-1)]
subtribe <- t3
t4 <- genus.taxonomy[which(genus.taxonomy[, 2]%in%t3), ]
t5 <- lapply(1:length(t3),
	function(x) t4[which(t4[, 2]%in%t3[x]), ])
t6 <- lapply(1:length(t5), function(x) t5[[x]]$genus)
subtribe.genus <- t6

#tribe
t1 <- summary(as.factor(genus.taxonomy[, 3]), maxsum = 10000)
t2 <- names(t1)[which(t1>1)]
t3 <- t2[1:(length(t2)-1)]
tribe <- t3
t4 <- genus.taxonomy[which(genus.taxonomy[, 3]%in%t3), ]
t5 <- lapply(1:length(t3),
	function(x) t4[which(t4[, 3]%in%t3[x]), ])
t6 <- lapply(1:length(t5), function(x) t5[[x]]$genus)
tribe.genus <- t6

#subfamily
t1 <- summary(as.factor(genus.taxonomy[, 4]), maxsum = 10000)
t2 <- names(t1)[which(t1>1)]
t3 <- t2[1:(length(t2)-1)]
subfamily <- t3
t4 <- genus.taxonomy[which(genus.taxonomy[, 4]%in%t3), ]
t5 <- lapply(1:length(t3),
	function(x) t4[which(t4[, 4]%in%t3[x]), ])
t6 <- lapply(1:length(t5), function(x) t5[[x]]$genus)
subfamily.genus <- t6

#family
t1 <- summary(as.factor(genus.taxonomy[, 5]), maxsum = 10000)
t2 <- names(t1)[which(t1>1)]
family <- t2
t4 <- genus.taxonomy[which(genus.taxonomy[, 5]%in%t2), ]
t5 <- lapply(1:length(t2),
	function(x) t4[which(t4[, 5]%in%t2[x]), ])
t6 <- lapply(1:length(t5), function(x) t5[[x]]$genus)
family.genus <- t6

#order
t1 <- summary(as.factor(genus.taxonomy[, 6]), maxsum = 10000)
t2 <- names(t1)[which(t1>1)]
order <- t2
t4 <- genus.taxonomy[which(genus.taxonomy[, 6]%in%t2), ]
t5 <- lapply(1:length(t2),
	function(x) t4[which(t4[, 6]%in%t2[x]), ])
t6 <- lapply(1:length(t5), function(x) t5[[x]]$genus)
order.genus <- t6

#subclass
t1 <- summary(as.factor(genus.taxonomy[, 7]), maxsum = 10000)
t2 <- names(t1)[which(t1>1)]
t3 <- t2[1:(length(t2)-1)]
subclass <- t3
t4 <- genus.taxonomy[which(genus.taxonomy[, 7]%in%t3), ]
t5 <- lapply(1:length(t3),
	function(x) t4[which(t4[, 7]%in%t3[x]), ])
t6 <- lapply(1:length(t5), function(x) t5[[x]]$genus)
subclass.genus <- t6

clade.list <- c(subtribe, tribe, subfamily, family, order, subclass)
clade.vector <- as.vector(unlist(clade.list))

taxa.list <- c(subtribe.genus, tribe.genus, subfamily.genus, family.genus,
	order.genus, subclass.genus)

##loading multiple phylogenies (i.e., 100 trees from posterior distribution)
trees <- read.tree('100phylogenies.tre')

##matching phylogenies and community (genus-by-site) matrix
trees.match <- lapply(1:length(trees),
	function(x) match.phylo.comm(trees[[x]], comm))
trees <- lapply(1:length(trees), function(x) trees.match[[x]]$phy)

##finding most recent common ancestor for each taxonomic rank
foo <- function(tree) lapply(1:length(taxa.list),
		function(x) findMRCA(tree, taxa.list[[x]], type = 'node'))

taxaMRCA <- lapply(trees,foo)

matrixMRCA <- matrix(unlist(taxaMRCA), ncol = length(taxa.list),  byrow = T)

taxa.vector <- lapply(1:length(trees), function(x) matrixMRCA[x, ])

node.labels <- lapply(1:length(trees),
	function(x) vector("character",Ntip(tree)-1))

##assigning node labels
for(i in 1:length(trees)){
	node_labels[[i]][taxa.vector[[i]]-Ntip(tree)] <- clade.vector
}

for(i in 1:length(trees)){
	trees[[i]]$node.labels <- node.labels[[i]]
}

##writing phylogenies with node labels
lapply(1:length(trees),
	function(x) write.tree(trees[[x]],
	file = paste0(c('tree_nodelabels'), x, ".tre")))

###interfacing with SUNPLIN; see https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-14-324
##list 100 phylogenies with node labels
trees.list <- list.files(pattern="*_nodelabels.tre")

#loading SUNPLIN and its functions as a shared R object
dyn.load("sunplin.spn")
source("sunplin-functions.r")

##inserting missing taxa
#'sunplin_infile.txt' is a two-column table comprising taxa to be inserted and their most derived consensus clade (MDCC)
#for details see https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-14-324
trees.sunplin <- lapply(1:length(trees),
	function(x) sunplin.expd(trees.list[x], "sunplin_infile.txt", 100, 1))
#This generates 100 trees for each input phylogeny with taxa inserted at random positions within their MDCC

##unlist and create multiPhylo comprising 10k SUNPLIN trees
trees.sunplin <- unlist(trees.sunplin)

foo2 <- function(trees.sunplin) lapply(1:length(trees),
		function(x) sunplin.n.tree(trees.sunplin, x, ".tre"))
trees100 <- lapply(trees.sunplin, foo2)

for(i in 1:length(trees100)){
	class(trees100[[i]]) <- 'multiPhylo'
}

10k.trees.sunplin <- do.call(c, lapply(1:length(trees100), function(x) trees100[[x]]))

###Computing Lineage Diversity with multiple phylogenies
##matching phylogenies and community matrix
tmp <- lapply(1:length(10k.trees.sunplin),
	function(x) match.phylo.comm(10k.trees.sunplin[[x]], comm))

comm.list <- lapply(1:length(10k.trees.sunplin), function(x) tmp[[x]]$comm)


LD.sunplin <- lapply(1:length(10k.trees.sunplin),
	function(x) ses.pd(comm.list[[x]], 10k.trees.sunplin[[x]], null.model = 'taxa.label', runs = 999))
#most efficient to run multiple ses.pd analyses in parallel; i.e. using High-Performance Computing clusters

LD.sunplin <- do.call(cbind, LD.sunplin)

###Supplementary Figure 1
##creating temporary files for linear, quadratic and piecewise regressions. tmp4 = list of break-points in piecewise regression
tmp <- lapply(1:ncol(LD.sunplin), function(x)
	summary(lm(LD.sunplin[, x] ~ md$MAP))$adj.r.squared)

tmp2 <- lapply(1:length(LD.sunplin), function(x)
	summary(lm(LD.sunplin[, x] ~ poly(md$MAP, 2, raw = T)))$adj.r.squared)

tmp3 <- lapply(1:length(LD.sunplin), function(x)
	summary(segmented(lm(LD.sunplin[, x] ~ md$MAP), seg.Z = ~ md$MAP))$adj.r.squared)

tmp4 <- lapply(1:length(LD.sunplin), function(x)
	summary(segmented(lm(LD.sunplin[, x] ~ md$MAP), seg.Z = ~ md$MAP))$psi[2])

##calculating mean and 95% CI for break-point (tmp4)
error <- qnorm(0.975)*sd(unlist(tmp4))/sqrt(length(unlist(tmp4)))
mean(unlist(tmp4))
mean(unlist(tmp4))-error
mean(unlist(tmp4))+error

##plot
par(mfrow = c(1,3))
hist(unlist(tmp), main = 'Linear Regression', xlab = 'Adjusted r-squared',
	col = 'gray', cex.axis = 2, cex.lab = 2, cex.main = 2)
abline(v = mean(unlist(tmp)), lty = 'dashed', lwd = 3)

hist(unlist(tmp2), main = 'Polynomial Quadratic Model',
	xlab = 'Adjusted r-squared', col = 'gray', cex.axis = 2,
	cex.lab = 2, cex.main = 2, xlim = c(0.38, 0.52))
abline(v = mean(unlist(tmp2)), lty = 'dashed', lwd = 3)

hist(unlist(tmp3), main = 'Piecewise Regression',
	xlab = 'Adjusted r-squared', col = 'gray', cex.axis = 2, cex.lab = 2,
	cex.main = 2)
abline(v = mean(unlist(tmp3)), lty = 'dashed', lwd = 3)

###generating species-level phylogeny
#this works for coalescent and birth-death, to simply create polytomies, see function expandTaxonTree in paleotree package

##function (adapted from Kyle Dexter, University of Edinburgh; kgdexter@gmail.com)
add_species_fcn <- function(phy, data, model = "bd", birth = 1, death = 0.9, bind.depth = NA){
	#first narrowing the tree and the data down to genera in common between the two
	tmp <- as.character(unique(data$Genus))
	tmp.match <- na.omit(match(phy$tip.label, tmp))
	tmp.genera <- tmp[tmp.match]
	tmp.tips2drop <- phy$tip.label[!phy$tip.label %in% tmp.genera]
	if (length(tmp.tips2drop)<1) phy.trim <- phy else phy.trim <- drop.tip(phy.trim, tmp.tips2drop)
	
	#then looping across all genera 
	for (i in 1:(length(tmp.genera))){
		#this first step is simply getting the species for the genus in a vector
		genus <- tmp.genera[i]
		tmp.species <- data[data$Genus==genus, 'Species']
		tmp.species <- as.character(tmp.species)
		tmp.species <- paste(genus, "_", tmp.species, sep = "")

		if (length(tmp.species)>=2) {
			if (model=="coalescent"){
				genus.tree <- rcoal(length(tmp.species), tmp.species)
				} else
				if (model=="bd"){
					beta.tree <- sim.bd.taxa(length(tmp.species), 1, birth, death, complete = FALSE)
					genus.tree <- beta.tree[[1]]
					tmp2 <- genus.tree[[1]]
					genus.tree$tip.label <- tmp.species
					}	
			bind.node <- match(genus, phy.trim$tip.label)
			if (is.na(bind.depth)){
				bind.depth2 <- (phy.trim$edge.length[which(phy.trim$edge[,2]==bind.node)])
				genus.tree$root.edge <- (tmp2[[2]] - max(branching.times(genus.tree)))*(bind.depth2/tmp2[[2]])
				genus.tree$edge.length <- (genus.tree$edge.length)*(bind.depth/tmp2[[2]])
				} else {
				bind.depth2 <- (phy.trim$edge.length[which(phy.trim$edge[,2]==bind.node)])*bind.depth2
				genus.tree$edge.length <- (genus.tree$edge.length)*(bind.depth2/max(branching.times(genus.tree)))
				}
			phy.trim <- bind.tree(phy.trim, genus.tree, bind.node, bind.depth2)
			phy.trim <- drop.tip(phy.trim, unlist(genus))
			} else {
			phy.trim$tip.label[which(phy.trim$tip.label==genus)] <- tmp.species
		}
	}
	return(phy.trim)
}

##loading metada (md4) matrix with species to add in first column
md4 <- read.csv(file.choose(), row.names = 1)

##running function
spp.tree <- add_species_fcn(tree, md4)

##making phylogeny ultrametric
spp.tree <- chronosMPL(spp.tree)

###computing lineage diversity using species-level phylogeny
##first, loading community (species-by-site) matrix
comm2 <- read.table(file.choose(), header = T, row.names = 1, sep = ',')

##matching community matrix and phylogeny (i.e., checking whether species in matrix are tips in phylogeny; and vice-versa)
tmp <- match.phylo.comm(spp.tree, comm2)
comm2 <- tmp$comm
spp.tree <- tmp$phy

LD.species <- ses.pd(comm2, spp.tree, null.model = 'taxa.label', runs = 999)

###Rarefacted Lineage Diversity
##keeping communities with at least 1/4 of highest genus richness
tmp <- apply(comm, 1, sum)
comm2 <- comm[which(tmp >= 86), ]

##rarefaction
comm2 <- lapply(1:100, function(x) rrarefy(comm2, 85))

##excluding genera with no records after rarefaction
tmp <- lapply(1:length(comm2), function(x) apply(comm2[[x]], 2, sum))

comm2 <- lapply(1:length(comm2), function(x) comm2[[x]][, which(tmp[[x]] > 0)])
#this creates a list with 100 communities rarefacted to 1/4 of highest genus richness

##matching community matrices with phylogeny
tmp <- lapply(1:length(comm2), function(x) match.phylo.comm(tree, comm2[[x]]))
trees <- lapply(1:length(tmp), function(x) tmp[[x]]$phy)
comm2 <- lapply(1:length(tmp), function(x) tmp[[x]]$phy)

##computing and unlisting Lineage Diversity for 100 rarefacted communities
LD.rarefacted <- lapply(1:length(trees), function(x) ses.pd(comm2[[x]], trees[[x]], null.model = 'taxa.label', runs = 999))
LD.rarefacted <- do.call(cbind, LD.rarefacted)

##calculating mean Lineage Diversity
LD.mean <- as.matrix(apply(LD.rarefacted, 1, mean))
colnames(LD.mean) <- 'LD_mean'

##matching LD rarefacted and matrix with explanatory variables
md5 <- md[which(rownames(md)%in%rownames(comm2[[1]])), ]
md5 <- cbind(pd.mean, md5)

##keeping only sites with high mean annual precipitation
hi.MAP <- md4[which(md5$MAP>1490),]

##Generalised Least Squares (controlling for spatial AC)
f1 <- formula(hi.MAP$LD_mean ~ hi.MAP$MAP)
hi.ac <- gls(f1, correlation = corExp(form = ~ 'Long10' + 'Lat10', nugget = TRUE), data = hi.MAP)

###Supplementary Figure 7
plot(hi.MAP$LD_mean ~ hi.MAP$MAP, col = "white", xlab = "Mean Annual Precipitation (mm)",
	ylab = "Rarefacted Lineage Diversity (sesPD)", cex.lab = 1.5, cex.axis = 1.5)
main = title('High MAP communities', cex.main = 1.5)

##setting color ramp for points
var <- hi.MAP$LD_mean
nclas <- brewer.pal(4, "Spectral")
nclas <- nclas[4:1]
class <- classIntervals(var)
colcode <- findColours(class, nclas)

points(hi.MAP$MAP, hi.MAP$LD_mean, pch = 17, col = colcode)

##extracting coefficients of correlation for legend
hi.r = bquote(r^2 == .(format(cor(hi.MAP$LD_mean,predict(hi.ac))^2, digits = 1)))
legend('topright', legend = hi.r, bty = "n", cex = 1.5)

##extracting slope and intercept for curves
x.hi <- c(1490,max(md5$MAP))
y.hi <- x.hi*(lm(hi.MAP$LD ~ hi.MAP$MAP)$coefficients[2])+ lm(hi.MAP$LD ~ hi.MAP$MAP)$coefficients[1]

##extracting ranges for 99% confidence intervals and plotting curves
hi.ci <- lm(LD_mean ~ MAP, data = hi.MAP)
hi.predict <- predict(hi.ci, interval="confidence", level = 0.99)
ix <- sort(hi.MAP$MAP,index.return=T)$ix
polygon(c(rev(hi.MAP$MAP[ix]), hi.MAP$MAP[ix]), c(rev(hi.predict[ix, 3]),
	hi.predict[ix, 2]), border = NA, col = gray(0.2,alpha = 0.5))
lines(x.hi, y.hi, lwd = 5, col = gray(0.2,alpha = 0.9))

