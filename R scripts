###loading libraries
require(classInt)
require(maps)
require(nlme)
require(phytools)
require(picante)
require(raster)
require(RColorBrewer)
require(segmented)
require(vegan)

###loading objects
#community (genus-by-site) matix
comm <- read.csv(file.choose(), header = T, row.names = 1, sep = ',')
#phylogeny
phy <- read.tree('phy.tre')
##matching objects
tmp <- match.phylo.comm(phy, comm)
comm <- tmp$comm
phy <- tmp$phy

###computing lineage diversity
LD <- ses.pd(comm, phy, null.model = 'taxa.labels', runs = 999)

###loading metadata (md) matrix comprising explanatory variables
#md and community matrix have the same row order 
md <- read.csv(file.choose(), header = T, row.names = 1, sep = ',')
md <- cbind(LD, md)

###regressions
#linear
summary(lm(LD ~ MAP, data = md))#LD = Lineage Diversity; MAP = Mean Annual Precipitation
#quadratic
summary(lm(LD ~ poly(MAP, 2, raw = T), data = md)
#piecewise
summary(segmented(lm(LD ~ MAP, data = md), seg.Z = ~ MAP))

###subsetting metadata according to break-point in piecewise regression
low.MAP <- md[which(md$MAP<1490),]
hi.MAP <- md[which(md$MAP>=1490),]

###Generalised Least Squares (controlling for spatial AC)
##low.MAP
attach(low.MAP)
f1 <- formula(LD ~ MAP)

low.null <- gls(f1, data = low.MAP)
low.ac <- gls(f1, correlation = corExp(form = ~ 'Long10' + 'Lat10', nugget = TRUE), data = low.MAP)
#check available correlation structures at https://stat.ethz.ch/R-manual/R-devel/library/nlme/html/corClasses.html

##hi.MAP
detach(low.MAP)
attach(hi.MAP)

hi.null <- gls(f1, data = hi.MAP)
hi.ac <- gls(f1, correlation = corExp(form = ~ 'Long10' + 'Lat10', nugget = TRUE), data = hi.MAP)
#extracting AIC values
AIC(low.null)
AIC(low.ac)
AIC(hi.null)
AIC(hi.ac)

###computing phylogenetic signal	
##loading metadata matrix comprising precipitation niche of each genus (calculating mean MAP for sites at which it occurred)
md2 <- read.table(file.choose(), header = F, row.names = 1, sep = ',')
phylovector <- as.vector(prec$V2)#column with mean MAP
names(phylovector) <- rownames(md2)

##matching objects and computing phylosignal
tmp <- match.phylo.data(phy, phylovector)
phy <- tmp$phy
phylovector <- tmp$data

phylosig(phy, phylovector, method = 'lambda', test = T, nsim = 1000)

###Figure 1	
obj <- contMap(phy, phylovector, plot = F)
plot(obj, type = 'fan', lwd = 1.5, ftype = 'off', legend = F, )
add.color.bar(leg = 80, x = 65, y = 140, lims = obj$lims, obj$cols, invert = T, lwd = 3, digits = 2, fsize = 1, prompt = FALSE,
	      title = "MAP", subtitle = "length=80")

###Figure 2
latlong <- cbind(md$Long10, md$Lat10)
par(mfrow=c(1,2))

##x~y plot
plot(md$LD ~ md$MAP, col = "white", xlab = "Mean Annual Precipitation (mm)", ylab = "Lineage Diversity (sesPD)",, 
     	cex.axis = 1.5, cex.lab = 1.5)
main = title('a', cex.main = 1.5, adj = 0)

##setting color ramp for points
var <- md$LD
nclas <- brewer.pal(4, "Spectral")
nclas <- nclas[4:1]
class <- classIntervals(var)
colcode <- findColours(class, nclas)	
points(md$MAP, md$LD, pch = c(17, 16)[as.numeric(md$MAP_beta)], col = colcode)

##extracting coefficients of correlation for legend
low.r = bquote(r^2 == .(format(cor(low.MAP$LD,predict(low.ac))^2, digits = 2)))
hi.r = bquote(r^2 == .(format(cor(hi.MAP$LD,predict(hi.ac))^2, digits = 2)))
legend("topleft", legend = low.r, bty = "n", cex = 1.5)
legend("topright", legend = hi.r, bty = "n", cex = 1.5)

##extracting slope and intercept for curves
x.low <- c(min(md$MAP), 1490)
y.low <- x.low* lm(low.MAP$LD ~ low.MAP$MAP)$coefficients[2]-lm(low.MAP$LD ~ low.MAP$MAP)$coefficients[1]
x.hi <- c(1490,max(md$MAP))
y.hi <- x.hi*(lm(low.MAP$LD ~ low.MAP$MAP)$coefficients[2])+ lm(low.MAP$LD ~ low.MAP$MAP)$coefficients[1]

##extracting ranges for 99% confidence intervals and plotting curves
#low.MAP
low.ci <- lm(LD ~ MAP, data = low.MAP)
low.predict <- predict(low.ci, interval = "confidence", level = 0.99)
ix <- sort(low.MAP$MAP, index.return = T)$ix
polygon(c(rev(low.MAP$MAP[ix]), low.MAP$MAP[ix]), c(rev(low.predict[ix, 3]), low.predict[ix, 2]),
	border = NA, col = gray(0.2, alpha = 0.5))
#hi.MAP
hi.ci <- lm(LD ~ MAP, data = hi.MAP)
hi.predict <- predict(hi.ci, interval = "confidence", level = 0.99)
ix <- sort(hi.MAP$MAP, index.return = T)$ix
polygon(c(rev(hi.MAP$MAP[ix]), hi.MAP$MAP[ix]), c(rev(hi.predict[ix, 3]), hi.predict[ix, 2]),
	border = NA, col = gray(0.2, alpha = 0.5))
lines(x.hi, y.hi, lwd = 5, col = gray(0.2, alpha = 0.9))
#break-point
abline(v = 1490, lty = 2, lwd = 5, col = gray(0.2,alpha = 0.9))

#map
map(xlim = c(-77.8533,-34.8608), ylim = c(-24.9044,8.4711), lty = 'dashed')#min and max latlongs
map.axes(cex.axis = 1.5)
points(md$Long10, md$Lat10, pch = c(17, 16)[as.numeric(md2$MAP_beta)], col = colcode, cex = 0.5)
ordisurf(latlong, md$MAP, col = "black", level = c(1200, 1800), labcex = 0.8, main = "", add = T)
ordisurf(latlong, md$MAP, col = "gray60", level = c(2400, 2800), labcex = 0.8, main = "", add = T)
main = title('b', cex.main = 1.5, adj = 0)
	
###Figure 3
#load shapefiles from wd and metadata (md3) comprising latlongs for 80 tree communities with highest LD (top 5%) 
md3 <- read.csv(file.choose(), header = T, row.names = 1, sep = ',')

wdpa <- shapefile('wdpa')#from World Database of Protected Areas
sa <- shapefile('south_america')

e <- c(min(md3$Long10), max(md3$Long10), min(md3$Lat10), max(md3$Lat10))#map extension
wdpa <- crop(wdpa, e)

map(xlim = c(-77.8533, -34.8608), ylim = c(-24.9044, 8.4711), col = 'white')
map.axes()

plot(wdpa, col = 'gray90', border = 'gray90', add = T)
plot(south.amer, add = T)
points(md2$Long10, md2$Lat10, pch = 16, col = rgb(t(col2rgb("red"))/255, alpha = 0.5)), cex = 0.5)
legend('topright', c('Protected Areas', 'High LD unprotected'), pch = c(15, 16),
       col = c('gray90', rgb(t(col2rgb("red"))/255, alpha = 0.5)), bty = 'n')

###Suplementary Figures (in prep)

###SUNPLIN (in prep)
dyn.load("sunplin.spn")
source("sunplin-functions.r")
trees <- list.files(pattern="*.tre")
trees.sunplin <- lapply(1:length(trees),
	function(x) sunplin.expd(trees[x], "sunplin_infile.txt", 100, 1))
trees.sunplin2 <- unlist(trees.sunplin)
foo <- function(trees.sunplin2) lapply(1:length(trees),
		function(x) sunplin.n.tree(trees.sunplin2, x, "tree"))
trees100 <- lapply(trees.sunplin2, foo)
for(i in 1:100){
	class(trees100[[i]]) <- 'multiPhylo'
}
10k.trees.sunplin <- do.call(c, lapply(1:100, function(x) trees100[[x]]))
